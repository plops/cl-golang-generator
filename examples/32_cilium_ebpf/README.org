i want to perform anomaly detection with ebpf

first try an example with cilium

- references
  

https://www.evilsocket.net/2022/08/15/Process-behaviour-anomaly-detection-using-eBPF-and-unsupervised-learning-Autoencoders/
https://news.ycombinator.com/item?id=32471400

https://github.com/cilium/ebpf golang
https://sysdig.com/blog/the-art-of-writing-ebpf-programs-a-primer/

#+begin_example
sudo install perf
perf list


#+end_example


- The full list of supported tracepoints can be easily explored by
  running perf list on the host.
- Each eBPF program must always return an integer value at the end of
  its execution, and this return value must be stored in R0.
  
- Each eBPF program, upon start, gets passed a pointer to a context in
  the R1 register. The context is basically a structure that assumes a
  different meaning depending on the specific event type to which we
  attach the eBPF program

#+begin_example

struct bpf_raw_tracepoint_args {
    __u64 args[0];
};


TRACE_EVENT_FN(sys_enter,
    TP_PROTO(struct pt_regs *regs, long id),
â€¦
#+end_example

-  every time our eBPF program is invoked via the sys_enter
  tracepoint, the first two arguments of the context will contain a
  pointer to a saved copy of the CPU registers at the time of the
  invocation (pt_regs) as well as the id of the system call that is
  being invoked.

- eBPF also offers the possibility to call a fixed set of kernel
  functions, called eBPF helpers . One of these helpers is
  bpf_probe_read. It can be thought of as a safe version of a memcpy.


- video tutorial on cilium/ebpf
  https://youtu.be/8z2R13GRi5g?t=1715

- i don't know how to invoke the build

- try to manually compile ebpf first:
#+begin_example


clang-14 -target bpf -Wall -O2 -c kprobe_percpu.c


sudo ln -s /usr/bin/llvm-strip /usr/bin/llvm-strip-14

[martin@localhost source00]$ go generate
Compiled /home/martin/stage/cl-golang-generator/examples/32_cilium_ebpf/source00/bpf_bpfel.o
Stripped /home/martin/stage/cl-golang-generator/examples/32_cilium_ebpf/source00/bpf_bpfel.o
Wrote /home/martin/stage/cl-golang-generator/examples/32_cilium_ebpf/source00/bpf_bpfel.go
Compiled /home/martin/stage/cl-golang-generator/examples/32_cilium_ebpf/source00/bpf_bpfeb.o
Stripped /home/martin/stage/cl-golang-generator/examples/32_cilium_ebpf/source00/bpf_bpfeb.o
Wrote /home/martin/stage/cl-golang-generator/examples/32_cilium_ebpf/source00/bpf_bpfeb.go

#+end_example

- try to compile the histogram ebpf code
#+begin_example
   clang-14 -target bpf -Wall -O2 -c bpf/bpf.c


[root@archlinux sys_enter]# cat format
name: sys_enter
ID: 347
format:
        field:unsigned short common_type;       offset:0;     size:2; signed:0;
        field:unsigned char common_flags;       offset:2;     size:1; signed:0;
        field:unsigned char common_preempt_count;    offset:3;        size:1; signed:0;
        field:int common_pid;   offset:4;       size:4;       signed:1;

        field:long id;  offset:8;       size:8; signed:1;
        field:unsigned long args[6];    offset:16;   size:48; signed:0;

print fmt: "NR %ld (%lx, %lx, %lx, %lx, %lx, %lx)", REC->id, REC->args[0], REC->args[1], REC->args[2], REC->args[3], REC->args[4], REC->args[5]
[root@archlinux sys_enter]# pwd
/sys/kernel/debug/tracing/events/raw_syscalls/sys_enter
[root@archlinux sys_enter]#
   #+end_example


- Since the ELF reader outputs a CollectionSpec it's possible to
  modify clang-compiled BPF code, for example to rewrite constants.
