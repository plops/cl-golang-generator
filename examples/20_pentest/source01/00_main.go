package main

import (
	"fmt"
	"os"
	"runtime/pprof"
	"time"
)

func timeNow() string {
	return time.Now().Format("2006-01-02 15:04:05.000")
}

type Greeter struct {
	expression string
	subject    string
}

func (g Greeter) greet() {
	fmt.Printf("%v  g.expression=%v g.subject=%v\n", timeNow(), g.expression, g.subject)
}
func main() {
	fmt.Printf("%v main \n", timeNow())
	var prof_fn = "satplan.prof"
	fmt.Printf("%v start profiling prof_fn=%v\n", timeNow(), prof_fn)
	fmt.Printf("%v you can view the profile with: go tool pprof satplan satplan.prof \n", timeNow())
	prof_f, err00 := os.Create(prof_fn)
	if !((err00) == (nil)) {
		fmt.Printf("%v os.Create(prof_fn) err00=%v\n", timeNow(), err00)
		panic(err00)
	}
	pprof.StartCPUProfile(prof_f)
	defer pprof.StopCPUProfile()
	esa := []string{"Hey", "Hello", "Howdy", "Yo", "Wazzup"}
	fmt.Printf("%v  esa=%v esa[0]=%v\n", timeNow(), esa, esa[0])
	for _, expr := range esa {
		if (expr[0]) == ('H') {
			var g = Greeter{expression: expr, subject: "you"}
			g.greet()
		}
	}
}
